/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import __project.groupId.artifactId_.model.Account;
import __project.groupId.artifactId_.model.AccountNotFoundError;
import __project.groupId.artifactId_.model.DepositRequest;
import __project.groupId.artifactId_.model.NewAccount;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
public interface AccountsApi {

    @Operation(summary = "Create an account", description = "Create an account with an option to deposit initial amount", tags={ "Account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success.OK"),
        
        @ApiResponse(responseCode = "404", description = "Account not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AccountNotFoundError.class))) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> accountId(@Parameter(in = ParameterIn.DEFAULT, description = "Customer Details and Desired amount to deposit", required=true, schema=@Schema()) @Valid @RequestBody NewAccount body);


    @Operation(summary = "Get account balance", description = "Get account information using account number", tags={ "Account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Account Balance Retrieved", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))),
        
        @ApiResponse(responseCode = "404", description = "Account not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AccountNotFoundError.class))) })
    @RequestMapping(value = "/accounts/{accountId}/balance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Account> accountsAccountIdBalanceGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("accountId") String accountId);


    @Operation(summary = "Deposit amount to account", description = "Initiates a deposit operation of a desired amount to the account specified", tags={ "Account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Success"),
        
        @ApiResponse(responseCode = "404", description = "Account not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AccountNotFoundError.class))) })
    @RequestMapping(value = "/accounts/deposit",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> depositToAccount(@Parameter(in = ParameterIn.DEFAULT, description = "Account number and desired amount to deposit", required=true, schema=@Schema()) @Valid @RequestBody DepositRequest body);

}

