openapi: 3.0.3
info:
  title: Banking API Specification for account operations
  description: |-
    A simple banking API that allows two operations:
    - API to open an account with the option to add initial credit.
    - API to retrieve account information including account balance.
    - API to retrieve person information.
    - API to make a transfer from one account to another.

  version: 1.0
servers:
  - url: '{protocol}://localhost:8081/{basePath}'
    description: My API locally hosted release
security:
  - bearerAuth: []

tags:
  - name: accounts
    description: Operations between bank accounts
paths:
  /accounts:
    post:
      tags:
        - Account
      summary: Create an account
      description: Create an account with an option to deposit initial amount
      operationId: accountId
      requestBody:
        description: User Details and Desired amount to deposit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccount'
      responses:
        200:
          description: Success.OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreated'
        404:
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountNotFoundError'
  /accounts/{accountNumber}/balance:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Account
      summary: Get account balance
      description: Get account information using account number
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Account Balance Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountM'
        404:
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountNotFoundError'
  /accounts/deposit:
    post:
      tags:
        - Account
      summary: Deposit amount to account
      description: Initiates a deposit operation of a desired amount to the account specified
      operationId: depositToAccount
      requestBody:
        description: Account number and desired amount to deposit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
        required: true
      responses:
        204:
          description: Success
        404:
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountNotFoundError'
  /User/{accountNumber}:
    get:
      tags:
        - User
      summary: Retrieves Person information
      description: Retrieves Person information using User id.
      operationId: UserId
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: string

      responses:
        200:
          description: Person Infromation Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        404:
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountNotFoundError'
        401:
          description: Authorization information is missing or invalid.
        503:
          description: Unexpected error.
  /transfer:
    post:
      tags:
        - Account
      summary: Makes transfer between Accounts
      description: Makes transfer between Accounts
      operationId: transferId
      requestBody:
        description: Sender Account , Receiver account and Amount to be transferred need to be provided
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        200:
          description: Person Information Retrieved
          content:
            text/plain:
              schema:
                type: string
                example: Transfer Successfull
        404:
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountNotFoundError'
        401:
          description: Authorization information is missing or invalid.
        503:
          description: Unexpected error.

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  # 2) Apply the security globally to all operations


  schemas:
    NewAccount:
      type: object
      required:
        - name
        - email
        - password
        - street
        - city
        - state
        - country
        - postalCode
      properties:
        User:
          $ref: '#/components/schemas/UserM'


    AddressM:
      type: object
      properties:
        street:
          type: string
          example: 'street name'
        city:
          type: string
          example: 'city name'
        state:
          type: string
          example: 'state name'
        country:
          type: string
          example: 'country name'
        postalCode:
          type: string
          example: '501510'


    UserM:
      type: object
      properties:
        name:
          type: string
          example: 'fullName'
        email:
          type: string
          format: email
          example: 'maxmuller@gmail.com'
        password:
          type: string
          example: "max234"
        roles:
          type: string
        address:
          $ref: '#/components/schemas/AddressM'
        account:
          $ref: '#/components/schemas/AccountM'


    UserInfo:
      type: object
      properties:
        name:
          type: string
          example: 'Full Name'
        email:
          type: string
          format: email
          example: 'maxmuller@gmail.com'
        address:
          $ref: '#/components/schemas/AddressM'


    UserCreated:
      type: object
      properties:

        accountNumber:
          type: string
          example: 'A1234'
        balance:
          type: number
          example: 5000.00
        status:
          type: string
        createdTimeStamp:
          type: string
          format: date # or date-time
        UpdatedTimeStamp:
          type: string
          format: date # or date-time

    AccountM:
      type: object
      properties:
        accountNumber:
          type: string
          example: 'A1234'
        balance:
          type: number
          example: 5000.00
        status:
          type: string
        createdTimeStamp:
          type: string
          format: date # or date-time
        UpdatedTimeStamp:
          type: string
          format: date # or date-time

    AccountNotFoundError:
      type: object
      properties:
        message:
          type: string

    TransferRequest:
      type: object
      properties:
        senderAccount:
          type: string
        receiverAccount:
          type: string
        amount:
          type: number

    DepositRequest:
      type: object
      properties:
        accountNumber:
          type: string
        amount:
          type: number






